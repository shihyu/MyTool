apply plugin:SETestListener

class JUFailure {
    public String testName
    public Throwable exn

    public JUFailure(String n, Throwable e)
    {
        testName = n
        exn = e
    }
}

class SETestListener implements Plugin<Gradle>, org.gradle.api.tasks.testing.TestListener {
    TestDescriptor curSuite
    PrintStream testOut
    ArrayList<JUFailure> failures
    int numTests = 0

    public void beforeSuite(TestDescriptor suite) {
        curSuite = suite
        numTests = 0
        recordAndOutput("TEST ${normalizeClass(suite.getName())}")
    }

    private void printFailures() {
        def numF = failures.size()
        if (numF == 0) {
            return;
        }

        if (numF == 1) {
            recordAndOutput("There was ${numF} failure:")
        } else {
            recordAndOutput("There were ${numF} failures:")
        }

        for (int i =0; i < numF; i++) {
            recordAndOutput("${i+1}) ${failures.get(i).testName}")
            def exn = failures.get(i).exn
            if (exn != null) {
                exn.printStackTrace(testOut)
            }
        }
    }

    public void afterSuite(TestDescriptor suite, TestResult result) {
        recordAndOutput("")
        printFailures()
        if (failures.size() == 0) {
            if (numTests > 0) {
                recordAndOutput("OK")
                recordAndOutput(" (${numTests} test${if (numTests <= 1) "" else "s"})")
            }
        } else {
            recordAndOutput("FAILURES!!!");
            recordAndOutput("Tests run: ${numTests},  Failures: ${failures.size()}");
        }
        recordAndOutput("ENDTEST ${normalizeClass(suite.getName())}")
        numTests = 0
        failures.clear()
    }

    private String testName(TestDescriptor test) {
        String n = test.getName()
        n = n.replace(' ', '_');
        def idx = n.findIndexOf(0, {x -> x == '('})
        if (idx > 0) {
            n = n.substring(0, idx);
        }
        return n
    }

    public void beforeTest(TestDescriptor test) {
    }

    private String testStatus(TestDescriptor test, String r = '') {
        if (r == '') {
            recordAndOutput "METHOD ${testName(test)}(${curSuite.getName()}) ."
        } else {
            recordAndOutput "METHOD ${testName(test)}(${curSuite.getName()}) .${r}"
        }
    }

    public void afterTest(TestDescriptor test, TestResult result) {
        def rt = result.getResultType()
        numTests += 1
        switch (rt) {
        case TestResult.ResultType.SKIPPED:
            testStatus(test, 'I')
            break
        case TestResult.ResultType.SUCCESS:
            testStatus(test)
            break
        case TestResult.ResultType.FAILURE:
        default:
            testStatus(test, 'E')
            def ex = result.getException()
            failures.add(new JUFailure("${testName(test)}(${curSuite.getName()})", ex))
            break
        }
    }

    private void recordAndOutput(String msg) {
        testOut.println(msg)
    }

    private String normalizeClass(String cl)
    {
        def curName = cl
        def clSep = curName.findLastIndexOf({c -> c == '.'})
        if (clSep != -1) {
            curName = curName.substring(0, clSep) + "!" + curName.substring(clSep + 1)
        }
        return curName.replace('.' as char, '/' as char).replace(' ' as char, '_' as char)
    }

    void apply(Gradle g) {
        def failures = new ArrayList<JUFailure>()
        def l = new SETestListener(testOut: System.out, failures: failures)
        g.addListener(l)
        l.recordAndOutput("BEGIN_TESTING")
        l.recordAndOutput(new Date().toString())
        g.buildFinished {
            l.recordAndOutput("END_TESTING")
            l.recordAndOutput("gradle_post_unittest")
        }
    }
}

