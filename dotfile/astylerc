# 指定文件處理模式, C/C++模式, 其他選擇還有cs, java (缺省值)
--mode=c

# java風格縮進
--style=kr

# 縮進採用4個空格
--indent=spaces=4

# 對於單行的語句增加括號
--add-braces

# 強制轉換TAB為空格
--convert-tabs

# 將preprocessor(#define)這類語句, 如果有多行時前面填充對齊, 是對單語句（多行）進行填充
--indent-preproc-block
--indent-preproc-cond

# *,&這類字符靠近類型
--align-pointer=type

# 在操作符號兩邊增加空格字符 ==
--pad-oper

# 在幾個關鍵字後面增加空格
--pad-header

# 在if, for, while等代碼段前後增加空行, 這個其實挺好, 但如果你不喜歡, 可以關閉
--break-blocks

# 放棄括號內外的空格移除
#--unpad-paren

# 備份文件的後綴, 默認是.orig,=none表示不進行備份
--suffix=none

# 行結束用什麼文件格式, UNIX的還是Windows的
--lineend=linux

# switch case的代碼也按照標準縮進方式縮進
--indent-cases

# 如果函數開始後面({後面)第一行是註釋, 也進行縮進
--indent-col1-comments

# 多行條件語句如何進行縮進, =0表示和(對齊, =1表示縮進一次, =2表示縮進兩次, =3縮進一個半
--min-conditional-indent=1

# 最大縮進對齊長度, 默認40, 最大120, 超過這個長度的多行()內語句不進行縮進
#--max-instatement-indent=80

# if (thisVariable1 == thatVariable1 || thisVariable2 == thatVariable2 || thisVariable3 == thatVariable3)
# if (thisVariable1 == thatVariable1 || 
#     thisVariable2 == thatVariable2 || 
#     thisVariable3 == thatVariable3)
--break-after-logical
--max-code-length=80

